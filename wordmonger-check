#!/usr/bin/python3

import argparse
from collections import namedtuple
import configparser
import sys

BadUsage = namedtuple('BadUsage', ['position', 'word', 'replacement'])

def check_usage(words_and_usage, word, entire_file, index):
    replacement = words_and_usage[word]
    if word in replacement:
        # the original word appears in the correct form too, so we
        # need to check more carefully
        start = index - replacement.index(word)
        end = start + len(replacement)
        raw_file_text = entire_file[start:end]
        cleaned_up_text = raw_file_text.replace('\n', ' ')
        if cleaned_up_text != replacement:
            return BadUsage(index, word, replacement)
        return None
    else:
        return BadUsage(index, word, replacement)

def check_file(words_and_usage, filename):
    bad_usages = []
    with open(filename) as f:
        lines = f.readlines()
        original_file = ''.join(lines)
        for word in words_and_usage:
            index = 0
            while True:
                index = original_file.find(word, index)
                if index == -1:
                    break
                bad_usage = check_usage(words_and_usage, word, original_file, index)
                if bad_usage:
                    bad_usages.append(bad_usage)
                index = index + 1
    return bad_usages


def initialize_words(configfile):
    config = configparser.ConfigParser()
    config.optionxform = lambda option: option
    config.read(configfile)
    words_and_usage = {}
    for key in config['DEFAULT']:
        words_and_usage[key] = config['DEFAULT'][key]
    return words_and_usage

def main(args):
    parser = argparse.ArgumentParser()
    parser.add_argument('configfile')
    parser.add_argument('filename')
    args = parser.parse_args()
    configfile = args.configfile
    filename = args.filename

    with open(args.configfile) as f:
        print('Configuration is:' + str(f.readlines()))

    words_and_usage = initialize_words(configfile)

    bad_usages = check_file(words_and_usage, filename)
    for bad_usage in bad_usages:
        print(str(bad_usage.position) + ': "' + bad_usage.word + '" -> "' + bad_usage.replacement + '"')

if __name__ == '__main__':
    sys.exit(main(sys.argv))
